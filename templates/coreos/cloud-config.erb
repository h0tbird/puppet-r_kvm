#cloud-config

hostname: core-<%= @id %>.<%= @domain %>

write_files:

 - path: /etc/hosts
   content: |
    # /etc/hosts

 - path: /etc/systemd/system/systemd-resolved.d/50-link-resolv.conf
   content: |
    [Service]
    ExecStop=ln -fs ../run/systemd/resolve/resolv.conf /etc/resolv.conf

 - path: /etc/systemd/system/docker.service.d/50-docker-opts.conf
   content: |
    [Service]
    Environment='DOCKER_OPTS=--insecure-registry=regi01:5000'

 - path: /home/core/.bashrc
   permissions: 0644
   owner: root
   content: |
    [[ $- != *i* ]] && return
    alias ls='ls -hF --color=auto --group-directories-first'
    alias l='ls -l'
    alias ll='ls -la'
    alias grep='grep --color=auto'
    alias dim='docker images'
    alias dps='docker ps'
    alias dip="docker inspect --format '{{ .NetworkSettings.IPAddress }}'"
    alias drm='docker rm $(docker ps -qaf "status=exited")'
    alias drmi='docker rmi $(docker images -qf "dangling=true")'

 - path: /etc/ssh/sshd_config
   permissions: 0600
   owner: root:root
   content: |
    # Use most defaults for sshd configuration.
    UsePrivilegeSeparation sandbox
    Subsystem sftp internal-sftp
    ClientAliveInterval 180
    UseDNS no
    PermitRootLogin no
    AllowUsers core
    PasswordAuthentication no
    ChallengeResponseAuthentication no
    PermitUserEnvironment yes

 - path: /opt/bin/rbd
   permissions: 0755
   owner: root:root
   content: |
    #!/bin/bash
    docker run -i --rm \
    --privileged \
    --pid host \
    --net host \
    --volume /dev:/dev \
    --volume /sys:/sys \
    --volume /etc/ceph:/etc/ceph \
    --entrypoint /usr/bin/rbd \
    regi01:5000/ceph/daemon $@

 - path: /opt/bin/ceph
   permissions: 0755
   owner: root:root
   content: |
    #!/bin/bash
    docker run -it --rm \
    --privileged \
    --pid host \
    --net host \
    --volume /dev:/dev \
    --volume /sys:/sys \
    --volume /etc/ceph:/etc/ceph \
    --entrypoint /usr/bin/ceph \
    regi01:5000/ceph/daemon $@

 - path: /opt/bin/rados
   permissions: 0755
   owner: root:root
   content: |
    #!/bin/bash
    docker run -it --rm \
    --privileged \
    --pid host \
    --net host \
    --volume /dev:/dev \
    --volume /sys:/sys \
    --volume /etc/ceph:/etc/ceph \
    --entrypoint /usr/bin/rados \
    regi01:5000/ceph/daemon $@

coreos:

 units:

  - name: etcd2.service
    command: start

  - name: fleet.service
    command: start

  - name: flanneld.service
    drop-ins:
     - name: 50-network-config.conf
       content: |
        [Service]
        ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{ "Network": "<%= @flannel_config['network'] %>","SubnetLen": <%= @flannel_config['subnetlen'] %>,"SubnetMin": "<%= @flannel_config['subnetmin'] %>","SubnetMax": "<%= @flannel_config['subnetmax'] %>","Backend": {"Type": "<%= @flannel_config['backend']['type'] %>"} }'
    command: start

  - name: home-core-.ssh.mount
    command: start
    content: |
     [Mount]
     What=ssh
     Where=/home/core/.ssh
     Type=9p
     Options=trans=virtio,version=9p2000.L,ro

  - name: 00-docker0.netdev
    runtime: false
    content: |
     [NetDev]
     Name=docker0
     Kind=bridge

  - name: 00-eth0.network
    runtime: false
    content: |
     [Match]
     Name=eth0

     [Network]
     DHCP=v4

     [DHCP]
     CriticalConnection=true
     ClientIdentifier=mac

  - name: 00-eth1.network
    runtime: false
    content: |
     [Match]
     Name=eth1

     [Network]
     DHCP=no
     Bridge=docker0

  - name: etc-hosts-record.service
    command: start
    content: |
     [Unit]
     Description=Stores IP and hostname in etcd
     Requires=etcd2.service
     After=etcd2.service

     [Service]
     ExecStart=/bin/bash -c '\
       while true; do \
         IP=$$(dig $$(hostname) +short); \
         ROLE=$$(fleetctl list-machines | grep $${IP} | egrep -o "slave|master" | uniq); \
         if [ -n "$${ROLE}" ]; then \
           etcdctl set /hosts/core/$${ROLE}/$$(hostname) $${IP}; \
         fi; \
         sleep 60; \
       done'

  - name: docker-volume-rbd.service
    command: start
    content: |
     [Unit]
     Description=Docker RBD volume plugin
     Requires=docker.service
     After=docker.service

     [Service]
     Restart=on-failure
     RestartSec=10
     TimeoutStartSec=0

     Environment="PATH=/sbin:/bin:/usr/sbin:/usr/bin:/opt/bin"
     ExecStartPre=-/usr/bin/wget http://data01/coreos/docker-volume-rbd -O /opt/bin/docker-volume-rbd
     ExecStartPre=-/usr/bin/chmod 755 /opt/bin/docker-volume-rbd
     ExecStartPre=-/usr/bin/sleep 30
     ExecStart=/opt/bin/docker-volume-rbd

 fleet:
  metadata: "role=<%= @role %><% if @masterid -%>,masterid=<%= @masterid %><% end -%>"

 etcd2:
  name: core-<%= @id %>
  initial-cluster: <% @masters.each do |master| -%><%= master %>=http://<%= master %>:2380,<% end %>
<% if @masterid -%>
  listen-peer-urls: http://core-<%= @id %>:2380
  listen-client-urls: http://127.0.0.1:2379,http://core-<%= @id %>:2379
  initial-advertise-peer-urls: http://core-<%= @id %>:2380
  advertise-client-urls: http://core-<%= @id %>:2379
  initial-cluster-state: new
<% else -%>
  listen-client-urls: http://127.0.0.1:2379,http://core-<%= @id %>:2379
  advertise-client-urls: http://127.0.0.1:2379
  proxy: on
<% end -%>
