#cloud-config

hostname: core-<%= @id %>.<%= @domain %>

write_files:

 - path: /etc/hosts
   content: |
    # /etc/hosts

 - path: /etc/systemd/system/systemd-resolved.service.d/50-link-resolv.conf
   content: |
    [Service]
    Type=oneshot
    RemainAfterExit=yes
    Restart=no
    WatchdogSec=0
    ExecStart=
    ExecStartPre=-/usr/bin/rm -f /etc/.resolv.confd /etc/resolv.etcd
    ExecStartPre=-/usr/bin/echo > /run/systemd/resolve/resolv.conf
    ExecStartPre=-/usr/bin/ln -fs ../run/systemd/resolve/resolv.conf /etc/resolv.conf
    ExecStart=/usr/bin/bash -c "/usr/lib/systemd/systemd-resolved & sleep 10; systemctl kill systemd-resolved"
    ProtectSystem=true

 - path: /etc/systemd/system/docker.service.d/50-docker-opts.conf
   content: |
    [Service]
    Environment='DOCKER_OPTS=--insecure-registry=regi01:5000'

 - path: /home/core/.bashrc
   permissions: 0644
   owner: root
   content: |
    [[ $- != *i* ]] && return
    alias ls='ls -hF --color=auto --group-directories-first'
    alias l='ls -l'
    alias ll='ls -la'
    alias grep='grep --color=auto'
    alias dim='docker images'
    alias dps='docker ps'
    alias dip="docker inspect --format '{{ .NetworkSettings.IPAddress }}'"
    alias drm='docker rm -v $(docker ps -qaf status=exited)'
    alias drmi='docker rmi $(docker images -qf dangling=true)'
    alias drmv='docker volume rm $(docker volume ls -qf dangling=true)'

 - path: /etc/ssh/sshd_config
   permissions: 0600
   owner: root:root
   content: |
    # Use most defaults for sshd configuration.
    UsePrivilegeSeparation sandbox
    Subsystem sftp internal-sftp
    ClientAliveInterval 180
    UseDNS no
    PermitRootLogin no
    AllowUsers core
    PasswordAuthentication no
    ChallengeResponseAuthentication no
    PermitUserEnvironment yes

 - path: /opt/bin/ceph
   permissions: 0755
   owner: root:root
   content: |
    #!/bin/bash

    readonly CEPH_DOCKER_IMAGE=regi01:5000/h0tbird/ceph
    readonly CEPH_DOCKER_TAG=v9.2.0-2
    readonly CEPH_USER=root

    machinename=$(echo "${CEPH_DOCKER_IMAGE}-${CEPH_DOCKER_TAG}" | sed -r 's/[^a-zA-Z0-9_.-]/_/g')
    machinepath="/var/lib/toolbox/${machinename}"
    osrelease="${machinepath}/etc/os-release"

    [ -f ${osrelease} ] || {
      sudo mkdir -p "${machinepath}"
      sudo chown ${USER}: "${machinepath}"
      docker pull "${CEPH_DOCKER_IMAGE}:${CEPH_DOCKER_TAG}"
      docker run --name=${machinename} "${CEPH_DOCKER_IMAGE}:${CEPH_DOCKER_TAG}" /bin/true
      docker export ${machinename} | sudo tar -x -C "${machinepath}" -f -
      docker rm ${machinename}
      sudo touch ${osrelease}
    }

    [ "$1" == 'dryrun' ] || {
      sudo systemd-nspawn \
      --quiet \
      --directory="${machinepath}" \
      --capability=all \
      --share-system \
      --bind=/dev:/dev \
      --bind=/etc/ceph:/etc/ceph \
      --bind=/var/lib/ceph:/var/lib/ceph \
      --user="${CEPH_USER}" \
      --setenv=CMD="$(basename $0)" \
      --setenv=ARG="$*" \
      /bin/bash -c '\
      mount -o remount,rw -t sysfs sysfs /sys; \
      $CMD $ARG'
    }

 - path: /opt/bin/loopssh
   permissions: 0755
   owner: root:root
   content: |
    #!/bin/bash
    A=$(fleetctl list-machines -fields=ip -no-legend)
    B=$(for i in $A; do dig -x $i +short; done | sort -t '-' -k 2n)
    for i in $B; do ssh -o UserKnownHostsFile=/dev/null \
    -o StrictHostKeyChecking=no $i -C "$*"; done

coreos:

 units:

  - name: etcd2.service
    command: start

  - name: fleet.service
    command: start

  - name: flanneld.service
    drop-ins:
     - name: 50-network-config.conf
       content: |
        [Service]
        ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{ "Network": "<%= @flannel_config['network'] %>","SubnetLen": <%= @flannel_config['subnetlen'] %>,"SubnetMin": "<%= @flannel_config['subnetmin'] %>","SubnetMax": "<%= @flannel_config['subnetmax'] %>","Backend": {"Type": "<%= @flannel_config['backend']['type'] %>"} }'
    command: start

  - name: home-core-.ssh.mount
    command: start
    content: |
     [Mount]
     What=ssh
     Where=/home/core/.ssh
     Type=9p
     Options=trans=virtio,version=9p2000.L,ro

  - name: 00-docker0.netdev
    runtime: false
    content: |
     [NetDev]
     Name=docker0
     Kind=bridge

  - name: 00-eth0.network
    runtime: false
    content: |
     [Match]
     Name=eth0

     [Network]
     DHCP=v4

     [DHCP]
     CriticalConnection=true
     ClientIdentifier=mac

  - name: 00-eth1.network
    runtime: false
    content: |
     [Match]
     Name=eth1

     [Network]
     DHCP=no
     Bridge=docker0

  - name: etc-hosts-record.service
    command: start
    content: |
     [Unit]
     Description=Stores IP and hostname in etcd
     Requires=etcd2.service
     After=etcd2.service

     [Service]
     Type=oneshot
     ExecStart=/bin/bash -c '\
       IP=$$(dig $$(hostname) +short); \
       ROLE=$$(fleetctl list-machines | grep $${IP} | egrep -o "slave|master" | uniq); \
       if [ -n "$${ROLE}" ]; then \
         etcdctl set /hosts/core/$${ROLE}/$$(hostname) $${IP}; \
       fi'

  - name: etc-hosts-record.timer
    command: start
    content: |
     [Unit]
     Description=Run etc-hosts-record.service every 30 minutes

     [Timer]
     OnBootSec=1min
     OnUnitActiveSec=30min

  - name: docker-gc.service
    command: start
    content: |
     [Unit]
     Description=Docker garbage collector
     Requires=etcd2.service docker.service
     After=etcd2.service docker.service

     [Service]
     Type=oneshot
     WorkingDirectory=/tmp
     ExecStart=/bin/bash -c '\
       docker ps -aq --no-trunc | sort -u > containers.all; \
       docker ps -q --no-trunc | sort -u > containers.running; \
       docker rm -v $$(comm -23 containers.all containers.running) 2>/dev/null; \
       docker rmi $$(docker images -qf dangling=true) 2>/dev/null; \
       etcdctl set /docker/images/$$(hostname) "$$(docker ps --format "{{.Image}}" | sort -u)"; \
       for i in $$(etcdctl ls --recursive /docker/images); do etcdctl get $$i; done | sort -u > images.running; \
       docker images | awk "{print \$$1\\":\\"\$$2}" | sed 1d | sort -u > images.local'

  - name: docker-gc.timer
    command: start
    content: |
     [Unit]
     Description=Run docker-gc.service every 30 minutes

     [Timer]
     OnBootSec=1min
     OnUnitActiveSec=30min

  - name: ceph-tools.service
    command: start
    content: |
     [Unit]
     Description=Ceph tools
     Requires=docker.service
     After=docker.service

     [Service]
     Type=oneshot
     RemainAfterExit=yes
     ExecStart=/bin/bash -c '\
       [ -h /opt/bin/rbd ] || { ln -fs ceph /opt/bin/rbd; }; \
       [ -h /opt/bin/rados ] || { ln -fs ceph /opt/bin/rados; }; \
       /opt/bin/ceph dryrun'

  - name: docker-volume-rbd.service
    command: start
    content: |
     [Unit]
     Description=Docker RBD volume plugin
     Requires=docker.service
     After=docker.service

     [Service]
     Restart=on-failure
     RestartSec=10
     TimeoutStartSec=0

     Environment="PATH=/sbin:/bin:/usr/sbin:/usr/bin:/opt/bin"
     ExecStartPre=-/usr/bin/wget http://data01/coreos/docker-volume-rbd -O /opt/bin/docker-volume-rbd
     ExecStartPre=-/usr/bin/chmod 755 /opt/bin/docker-volume-rbd
     ExecStart=/opt/bin/docker-volume-rbd

 fleet:
  metadata: "role=<%= @role %><% if @masterid -%>,masterid=<%= @masterid %><% end -%>"

 etcd2:
  name: core-<%= @id %>
  initial-cluster: <% @masters.each do |master| -%><%= master %>=http://<%= master %>:2380,<% end %>
<% if @masterid -%>
  listen-peer-urls: http://core-<%= @id %>:2380
  listen-client-urls: http://127.0.0.1:2379,http://core-<%= @id %>:2379
  initial-advertise-peer-urls: http://core-<%= @id %>:2380
  advertise-client-urls: http://core-<%= @id %>:2379
  initial-cluster-state: new
<% else -%>
  listen-client-urls: http://127.0.0.1:2379,http://core-<%= @id %>:2379
  advertise-client-urls: http://127.0.0.1:2379
  proxy: on
<% end -%>
