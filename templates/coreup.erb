#!/bin/bash

#------------------------------------------------------------------------------
# Globals:
#------------------------------------------------------------------------------

# Instances:
readonly NAME=$1
readonly DOMAIN='demo.lan'
readonly MAXVMS=4

# Servers:
readonly DATA_SERVER='data01.demo.lan'
readonly CONTAINER_SERVER='regi01.demo.lan'

# Filesystem locations:
readonly IMGDIR="/root/coreos/${NAME}"
readonly RUNDIR="${IMGDIR}/run"
readonly CFGDIR="${IMGDIR}/conf"
readonly LOGFILE='/var/log/coreup.log'
readonly UDATA="${CFGDIR}/openstack/latest/user_data"

# Host resources:
readonly HOST_CORES=`grep -c processor /proc/cpuinfo`
readonly HOST_RAM=`free -m | awk '/Mem:/ {print $2}'`

#------------------------------------------------------------------------------
# Initializations:
#------------------------------------------------------------------------------

set -o pipefail
. /etc/init.d/functions

[ -d ${IMGDIR} ] || mkdir -p ${IMGDIR}
[ -d ${RUNDIR} ] || mkdir -p ${RUNDIR}
[ -d ${CFGDIR} ] || mkdir -p ${CFGDIR}
[ -d $(dirname ${UDATA}) ] || mkdir -p $(dirname ${UDATA})

#------------------------------------------------------------------------------
# Functions:
#------------------------------------------------------------------------------

function log() {
  echo "$(date +'%b %d %T') [${NAME}] $*" >> ${LOGFILE}
}

function is_ssh_alive() {
  local RETRIES=30; while [ ${RETRIES} -gt 0 ]; do
    timeout 2 bash -c "echo > /dev/tcp/${NAME}/22" &> /dev/null && return 0
    sleep 1; RETRIES=$((RETRIES - 1))
  done; return 1
}

function hostname_not_in_use() {
  ! ping -c1 -W2 ${NAME}.${DOMAIN} &> /dev/null
}

function download_coreos_image() {
  wget --quiet http://${DATA_SERVER}/coreos/coreos_qemu.img.bz2 \
  -O - | bzcat > ${IMGDIR}/${NAME}.img
  [[ $? -ne 0 || ! -s ${IMGDIR}/${NAME}.img ]] && return 1 || return 0
}

function resize_coreos_image() {
  qemu-img resize ${IMGDIR}/${NAME}.img +20G &> /dev/null && \
  return 0 || return 1
}

function generate_tap_interfaces() {
  for i in $(brctl show | awk '/^core/ {print $1}'); do
    ip l del ${NAME}_eth${i#core} &> /dev/null
    ip tuntap a d ${NAME}_eth${i#core} m tap || return 1
    brctl addif ${i} ${NAME}_eth${i#core} || return 1
    ip l s dev ${NAME}_eth${i#core} up || return 1
  done; return 0
}

function genmac() {
  echo `hostname` ${NAME} $1 | md5sum | \
  hexdump -n3 -e'/3 "00:16:3e" 3/1 ":%02X"'
}

function create_vm() {
  qemu-system-x86_64 \
  -enable-kvm \
  -name ${NAME}.${DOMAIN} \
  -smp sockets=$((${HOST_CORES} / ${MAXVMS})),cores=$((${HOST_CORES} / ${MAXVMS})),threads=1 \
  -m $((${HOST_RAM} / ${MAXVMS})) \
  -rtc base=utc \
  -machine accel=kvm,mem-merge=on \
  -boot order=c,reboot-timeout=60,strict=on \
  -cpu host \
  -nodefconfig \
  -device sga \
  -display none \
  -daemonize \
  \
  -netdev tap,ifname=${NAME}_eth0,id=hostnet0,vhost=on,script=no,downscript=no \
  -device virtio-net-pci,netdev=hostnet0,id=net0,romfile=,bus=pci.0,addr=0x3,mac=`genmac eth0` \
  \
  -netdev tap,ifname=${NAME}_eth1,id=hostnet1,vhost=on,script=no,downscript=no \
  -device virtio-net-pci,netdev=hostnet1,id=net1,romfile=,bus=pci.0,addr=0x4,mac=`genmac eth1` \
  \
  -netdev tap,ifname=${NAME}_eth2,id=hostnet2,vhost=on,script=no,downscript=no \
  -device virtio-net-pci,netdev=hostnet2,id=net2,romfile=,bus=pci.0,addr=0x5,mac=`genmac eth2` \
  \
  -drive if=none,file=${IMGDIR}/${NAME}.img,id=drive-virtio-disk0 \
  -device virtio-blk-pci,scsi=off,drive=drive-virtio-disk0,id=virtio-disk0 \
  \
  -fsdev local,id=conf,security_model=none,readonly,path=${CFGDIR} \
  -device virtio-9p-pci,fsdev=conf,mount_tag=config-2 \
  \
  -chardev socket,id=monitor,path=${RUNDIR}/monitor.sock,server,nowait \
  -mon chardev=monitor,id=monitor,mode=control \
  \
  -chardev socket,id=console,path=${RUNDIR}/console.sock,server,nowait \
  -device isa-serial,chardev=console,id=serial0 && return 0 || return 1
}

function powerdown_vm() {
  (echo '{ "execute": "qmp_capabilities" }{ "execute": "system_powerdown" }' | \
  socat - unix-connect:${RUNDIR}/monitor.sock &> /dev/null) || return 1
  local RETRIES=5; while [ ${RETRIES} -gt 0 ]; do
    (! pgrep -f "qemu.*${NAME}") &> /dev/null && return 0
    sleep 1; RETRIES=$((RETRIES - 1))
  done; pkill -f "qemu.*${NAME}" && return 0 || return 1
}

#------------------------------------------------------------------------------
# Main function:
#------------------------------------------------------------------------------

function main() {

  # Is the VM already running?
  MSG='Checking VM is not running...'; log "${MSG}"
  (action "${MSG}" [ $(pgrep -cf "qemu.*${NAME}") -eq 0 ]) && \
  log 'OK! Not running yet' || {
    log 'Ops! This VM is already running'; exit 0
  }

  # Is the hostname in use?
  MSG='Checking hostname is not in use...'; log "${MSG}"
  (action "${MSG}" hostname_not_in_use) && \
  log 'OK! Not in use yet' || {
    log 'Ops! This hostname is already in use'; exit 1
  }

  # MAXVMS limit reached?
  MSG='Checking VM limit is not reached...'; log "${MSG}"
  (action "${MSG}" [ $(pgrep -c qemu-system) -lt ${MAXVMS} ]) && \
  log 'OK! Limit not reached yet' || {
    log "Ops! Limit of ${MAXVMS} reached"; exit 1
  }

  # Download and uncompress the CoreOS image:
  [ -f ${IMGDIR}/${NAME}.img ] || {
    MSG='Downloading CoreOS image file...'; log "${MSG}"
    (action "${MSG}" download_coreos_image) && log 'OK! Download completed' || {
      log 'Ops! Unable to download or uncompress the image'; exit 1
    }
  }

  # Resize the CoreOS disk image:
  readonly IMGSIZE=`qemu-img info --output=json ${IMGDIR}/${NAME}.img | jq '.["virtual-size"]'`
  [ "${IMGSIZE}" -lt "30000000000" ] && {
    MSG='Resizing CoreOS disk image...'; log "${MSG}"
    (action "${MSG}" resize_coreos_image) && log 'OK! Image has new size' || {
      log 'Ops! Unable to resize the image'; exit 1
    }
  }

  # Generate the host TAP interfaces:
  MSG='Generating TAP interfaces...'; log "${MSG}"
  (action "${MSG}" generate_tap_interfaces) && log 'OK! Interfaces are UP' || {
    log 'Ops! Unable to setup the interfaces'; exit 1
  }

  # Start the virtual machine:
  MSG='Starting the virtual machine...'; log "${MSG}"
  (action "${MSG}" create_vm) && log 'OK! VM is running' || {
    log 'Ops! Unable to start VM'; exit 1
  }

  # Test if port 22 is listening:
  MSG='Testing SSH port...'; log "${MSG}"
  (action "${MSG}" is_ssh_alive) && log 'OK! SSH port is listening' || {
    log 'Ops! SSH port failed to connect'; exit 1
  }

  # One time reboot:
  [ ! -f ${CFGDIR}/bootstrapped ] && {

    MSG='Restarting after first boot...'; log "${MSG}"
    (action "${MSG}" powerdown_vm) && log 'OK! System is down' || {
      log 'Ops! Unable to powerdown'; exit 1
    }

    date > ${CFGDIR}/bootstrapped
    exec $0 $@
  }
}

#------------------------------------------------------------------------------
# Entry point:
#------------------------------------------------------------------------------

main "$@"

# vim: set syntax=sh expandtab tabstop=2:
