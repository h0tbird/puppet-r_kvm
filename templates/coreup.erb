#!/bin/bash

#------------------------------------------------------------------------------
# Definitions:
#------------------------------------------------------------------------------

# Instance:
NAME=$1
DOMAIN='demo.lan'

# Servers:
DATA_SERVER='data01.demo.lan'
CONTAINER_SERVER='regi01.demo.lan'

# Filesystem locations:
IMGDIR="/root/coreos/${NAME}"
RUNDIR="${IMGDIR}/run"
CFGDIR="${IMGDIR}/conf"
LOGFILE='/var/log/coreup.log'
UDATA="${CFGDIR}/openstack/latest/user_data"

#------------------------------------------------------------------------------
# Initializations:
#------------------------------------------------------------------------------

echo >> $LOGFILE
. /etc/init.d/functions

[ -d $IMGDIR ] || mkdir -p $IMGDIR
[ -d $RUNDIR ] || mkdir -p $RUNDIR
[ -d $CFGDIR ] || mkdir -p $CFGDIR
[ -d `dirname $UDATA` ] || mkdir -p `dirname $UDATA`

#------------------------------------------------------------------------------
# Functions:
#------------------------------------------------------------------------------

function log {
  echo "$(date +'%b %d %T') [$NAME] $*" >> $LOGFILE
}

#------------------------------------------------------------------------------
# Download and resize the CoreOS image:
#------------------------------------------------------------------------------

# Download:
[ -f ${IMGDIR}/${NAME}.img ] || {
  MSG='Downloading CoreOS image file...'; log "$MSG"; set -o pipefail
  wget --quiet http://${DATA_SERVER}/coreos/coreos_qemu.img.bz2 \
  -O - | bzcat > ${IMGDIR}/${NAME}.img &> /dev/null
  action "$MSG" test $? -eq 0
}

# Resize:
IMGSIZE=`qemu-img info --output=json ${IMGDIR}/${NAME}.img | jq '.["virtual-size"]'`
[ "$IMGSIZE" -lt "30000000000" ] && {
  MSG='Resizing CoreOS disk image...'; log "$MSG"
  qemu-img resize ${IMGDIR}/${NAME}.img +20G &> /dev/null
  action "$MSG" test $? -eq 0
}

#------------------------------------------------------------------------------
# cloud-config:
#------------------------------------------------------------------------------

MSG='Generating cloud-config...'; log "$MSG"
KEYS=$(cat ~/.ssh/authorized_keys | sed 's/^env.*ssh/ - ssh/' | grep "^ -")

cat << EOF > ${UDATA}
#cloud-config

hostname: ${NAME}

ssh_authorized_keys:
${KEYS}

write_files:
  - path: /etc/systemd/system/docker.service.d/50-insecure-registry.conf
    content: |
      [Service]
      Environment=DOCKER_OPTS='--insecure-registry=${CONTAINER_SERVER}:5000'
  - path: /home/core/.bashrc
    permissions: 0644
    owner: root
    content: |
      [[ \$- != *i* ]] && return
      alias ls='ls -hF --color=auto --group-directories-first'
      alias l='ls -l'
      alias ll='ls -la'
      alias grep='grep --color=auto'
      alias dim='docker images'
      alias dps='docker ps'
      alias dip="docker inspect --format '{{ .NetworkSettings.IPAddress }}'"
      alias drm='docker rm \$(docker ps -qa)';

coreos:
  units:
    - name: etcd.service
      command: start
    - name: fleet.service
      command: start
    - name: 00-br0.netdev
      runtime: false
      content: |
        [NetDev]
        Name=br0
        Kind=bridge
    - name: 00-br1.netdev
      runtime: false
      content: |
        [NetDev]
        Name=br1
        Kind=bridge
    - name: 00-br2.netdev
      runtime: false
      content: |
        [NetDev]
        Name=br2
        Kind=bridge
    - name: 01-eth0.network
      runtime: false
      content: |
        [Match]
        Name=eth0

        [Network]
        Bridge=br0
    - name: 01-eth1.network
      runtime: false
      content: |
        [Match]
        Name=eth1

        [Network]
        Bridge=br1
    - name: 01-eth2.network
      runtime: false
      content: |
        [Match]
        Name=eth2

        [Network]
        Bridge=br2
    - name: 02-br0.network
      runtime: false
      content: |
        [Match]
        Name=br0

        [Network]
        DHCP=v4
    - name: 02-br1.network
      runtime: false
      content: |
        [Match]
        Name=br1

        [Network]
        DHCP=v4
    - name: 02-br2.network
      runtime: false
      content: |
        [Match]
        Name=br2

        [Network]
        DHCP=v4
  fleet:
    metadata: host=${NAME}
  etcd:
    name: ${NAME}
    addr: ${NAME}:4001
    peer-addr: ${NAME}:7001
EOF

echo $NAME | grep -q '01' || \
echo '    peers: core01:7001' >> ${UDATA}

action "$MSG" test $? -eq 0

#------------------------------------------------------------------------------
# Host TAP interfaces:
#------------------------------------------------------------------------------

echo "$(date +'%b %d %T') [$NAME] Generating TAP interfaces..." >> $LOGFILE

for i in 0 1 2; do
  ip l del ${NAME}_eth${i} &> /dev/null
  ip tuntap a d ${NAME}_eth${i} m tap
  brctl addif br${i} ${NAME}_eth${i}
  ip l s dev ${NAME}_eth${i} up
done

#------------------------------------------------------------------------------
# Deterministic MAC:
#------------------------------------------------------------------------------

function genmac {
  echo `hostname` $NAME $1 | md5sum | hexdump -n3 -e'/3 "00:16:3e" 3/1 ":%02X"'
}

#------------------------------------------------------------------------------
# Virtual machine:
#------------------------------------------------------------------------------

echo "$(date +'%b %d %T') [$NAME] Starting the virtual machine..." >> $LOGFILE

qemu-system-x86_64 \
-enable-kvm \
-name ${NAME}.${DOMAIN} \
-smp sockets=2,cores=2,threads=1 \
-m 4096 \
-rtc base=utc \
-machine accel=kvm,mem-merge=on \
-boot order=c,reboot-timeout=60,strict=on \
-cpu host \
-nodefconfig \
-device sga \
-display none \
-daemonize \
\
-netdev tap,ifname=${NAME}_eth0,id=hostnet0,vhost=on,script=no,downscript=no \
-device virtio-net-pci,netdev=hostnet0,id=net0,romfile=,bus=pci.0,addr=0x3,mac=`genmac eth0` \
\
-netdev tap,ifname=${NAME}_eth1,id=hostnet1,vhost=on,script=no,downscript=no \
-device virtio-net-pci,netdev=hostnet1,id=net1,romfile=,bus=pci.0,addr=0x4,mac=`genmac eth1` \
\
-netdev tap,ifname=${NAME}_eth2,id=hostnet2,vhost=on,script=no,downscript=no \
-device virtio-net-pci,netdev=hostnet2,id=net2,romfile=,bus=pci.0,addr=0x5,mac=`genmac eth2` \
\
-drive if=none,file=${IMGDIR}/${NAME}.img,id=drive-virtio-disk0 \
-device virtio-blk-pci,scsi=off,drive=drive-virtio-disk0,id=virtio-disk0 \
\
-fsdev local,id=conf,security_model=none,readonly,path=${CFGDIR} \
-device virtio-9p-pci,fsdev=conf,mount_tag=config-2 \
\
-chardev socket,id=monitor,path=${RUNDIR}/monitor.sock,server,nowait \
-mon chardev=monitor,id=monitor,mode=control \
\
-chardev socket,id=console,path=${RUNDIR}/console.sock,server,nowait \
-device isa-serial,chardev=console,id=serial0

#------------------------------------------------------------------------------
# One time reboot:
#------------------------------------------------------------------------------

[ ! -f ${CFGDIR}/bootstrapped ] && sleep 10 && {
  echo "$(date +'%b %d %T') [$NAME] Restarting after first boot..." >> $LOGFILE
  echo '{ "execute": "qmp_capabilities" }{ "execute": "system_powerdown" }' | \
  socat - unix-connect:${RUNDIR}/monitor.sock &> /dev/null
  date > ${CFGDIR}/bootstrapped
  sleep 5 && exec $0 $@
}

echo "$(date +'%b %d %T') [$NAME] Up and running!" >> $LOGFILE
