#!/bin/bash

#------------------------------------------------------------------------------
# Definitions:
#------------------------------------------------------------------------------

NAME=$1
DOMAIN='demo.lan'
IMGDIR="/root/coreos/${NAME}"
RUNDIR="${IMGDIR}/run"
CFGDIR="${IMGDIR}/conf"
UDATA="${CFGDIR}/openstack/latest/user_data"

#------------------------------------------------------------------------------
# Download the image:
#------------------------------------------------------------------------------

[ -d $IMGDIR ] || mkdir -p $IMGDIR
[ -d $RUNDIR ] || mkdir -p $RUNDIR

[ -f ${IMGDIR}/${NAME}.img ] || \
wget http://repo01.demo.lan/coreos/coreos_qemu.img.bz2 \
-O - | bzcat > ${IMGDIR}/${NAME}.img

#------------------------------------------------------------------------------
# cloud-config:
#------------------------------------------------------------------------------

# header:
[ -d `dirname $UDATA` ] || mkdir -p `dirname $UDATA`
echo "#cloud-config" > ${UDATA}

# hostname:
echo "hostname: ${NAME}" >> ${UDATA}

# ssh_authorized_keys:
echo "ssh_authorized_keys:" >> ${UDATA}
cat ~/.ssh/authorized_keys | sed 's/^env.*ssh/ - ssh/' | grep "^ -" >> ${UDATA}

# coreos:
echo "coreos:" >> ${UDATA}

# units:
cat << EOF >> ${UDATA}
  units:
    - name: etcd.service
      command: start
    - name: fleet.service
      command: start
EOF

# etcd:
echo $NAME | egrep -q '01|02|03' && ( \
cat << EOF >> ${UDATA}
  etcd:
    name: ${NAME}
    discovery: https://discovery.etcd.io/7789dbbded095bb7027e0f197864af84
    addr: ${NAME}:4001
    peer-addr: ${NAME}:7001
EOF
)

#------------------------------------------------------------------------------
# Host TAP interfaces:
#------------------------------------------------------------------------------

for i in 0 1 2; do
  ip l s ${NAME}_eth${i} &> /dev/null || ip tuntap a d ${NAME}_eth${i} m tap
  brctl show br${i} | grep -q ${NAME}_eth${i} || brctl addif br${i} ${NAME}_eth${i}
  ip l sh ${NAME}_eth${i} | grep -q UP || ip l s dev ${NAME}_eth${i} up
done

#------------------------------------------------------------------------------
# Deterministic MAC:
#------------------------------------------------------------------------------

function genmac {
  echo `hostname` $NAME $1 | md5sum | hexdump -n3 -e'/3 "00:16:3e" 3/1 ":%02X"'
}

#------------------------------------------------------------------------------
# Virtual machine:
#------------------------------------------------------------------------------

qemu-system-x86_64 \
-enable-kvm \
-name ${NAME}.${DOMAIN} \
-smp 2,sockets=2,cores=1,threads=1 \
-m 1024 \
-rtc base=utc \
-machine accel=kvm \
-boot order=c,reboot-timeout=60,strict=on \
-cpu host \
-nodefconfig \
-device sga \
-display none \
-daemonize \
\
-netdev tap,ifname=${NAME}_eth0,id=hostnet0,vhost=on,script=no,downscript=no \
-device virtio-net-pci,netdev=hostnet0,id=net0,romfile=,bus=pci.0,addr=0x3,mac=`genmac eth0` \
\
-netdev tap,ifname=${NAME}_eth1,id=hostnet1,vhost=on,script=no,downscript=no \
-device virtio-net-pci,netdev=hostnet1,id=net1,romfile=,bus=pci.0,addr=0x4,mac=`genmac eth1` \
\
-netdev tap,ifname=${NAME}_eth2,id=hostnet2,vhost=on,script=no,downscript=no \
-device virtio-net-pci,netdev=hostnet2,id=net2,romfile=,bus=pci.0,addr=0x5,mac=`genmac eth2` \
\
-drive if=none,file=${IMGDIR}/${NAME}.img,id=drive-virtio-disk0 \
-device virtio-blk-pci,scsi=off,drive=drive-virtio-disk0,id=virtio-disk0 \
\
-fsdev local,id=conf,security_model=none,readonly,path=${CFGDIR} \
-device virtio-9p-pci,fsdev=conf,mount_tag=config-2 \
\
-chardev socket,id=monitor,path=${RUNDIR}/monitor.sock,server,nowait \
-mon chardev=monitor,id=monitor,mode=control \
\
-chardev socket,id=console,path=${RUNDIR}/console.sock,server,nowait \
-device isa-serial,chardev=console,id=serial0

#------------------------------------------------------------------------------
# Console:
#------------------------------------------------------------------------------

socat -,raw,echo=0 unix-connect:${RUNDIR}/console.sock; reset

