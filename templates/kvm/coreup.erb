#!/bin/bash

#------------------------------------------------------------------------------
# Globals:
#------------------------------------------------------------------------------

# Host resources:
readonly HOST_NAME=$(hostname -s)
readonly HOST_CORES=$(grep -c processor /proc/cpuinfo)
readonly HOST_RAM=$(free -m | awk '/Mem:/ {print $2}')
readonly HOST_DISK=$(df -B1G / | awk '/dev/ {print $2}')
readonly HOST_NUMAS=$(numactl -H | awk '/available/ {print $2}')

# Settings:
readonly NAME=$1
readonly DOMAIN='<%= @domain %>'
readonly VM_OUI='52:54:00'
readonly MAXVMS=4
readonly KVM_DISK=50
readonly IMG_SIZE=$(((${HOST_DISK}-${KVM_DISK})/${MAXVMS}))
readonly VM_SOCKETS=2
readonly NUMA='all'

# Servers:
readonly DATA_SERVER='data01.<%= @domain %>'
readonly CONTAINER_SERVER='regi01.<%= @domain %>'

# Filesystem locations:
readonly IMGDIR="/root/coreos/${NAME}"
readonly RUNDIR="${IMGDIR}/run"
readonly CFGDIR="${IMGDIR}/conf"
readonly LOGFILE='/var/log/coreup.log'
readonly SSHDIR='/root/.ssh'

#------------------------------------------------------------------------------
# Initializations:
#------------------------------------------------------------------------------

set -o pipefail
source /etc/init.d/functions

[ -d ${IMGDIR} ] || mkdir -p ${IMGDIR}
[ -d ${RUNDIR} ] || mkdir -p ${RUNDIR}
[ -d ${CFGDIR} ] || mkdir -p ${CFGDIR}

#------------------------------------------------------------------------------
# Source custom config if any:
#------------------------------------------------------------------------------

[ -f ${CFGDIR}/coreos.conf ] && source ${CFGDIR}/coreos.conf

#------------------------------------------------------------------------------
# Functions:
#------------------------------------------------------------------------------

function log() {
  echo "$(date +'%b %d %T') [${NAME}] $*" >> ${LOGFILE}
}

function is_ssh_alive() {
  local RETRIES=30; while [ ${RETRIES} -gt 0 ]; do
    timeout 2 bash -c "echo > /dev/tcp/${NAME}/22" &> /dev/null && return 0
    sleep 1; RETRIES=$((RETRIES - 1))
  done; return 1
}

function validate_vm_name() {
  local idx=$(((${HOST_NAME#kvm-} - 1) * 4))
  local min=$((idx + 1))
  local max=$((idx + 4))
  local id=$((${NAME#core-}))
  [[ ($id -lt $min) || ($id -gt $max) ]] && return 1
  return 0
}

function hostname_not_in_use() {
  ! ping -c1 -W2 ${NAME}.${DOMAIN} &> /dev/null
}

function download_coreos_image() {
  wget --quiet http://${DATA_SERVER}/coreos/coreos_qemu.img.bz2 \
  -O - | bzcat > ${IMGDIR}/${NAME}.img
  [[ $? -ne 0 || ! -s ${IMGDIR}/${NAME}.img ]] && return 1 || return 0
}

function resize_coreos_image() {
  qemu-img resize ${IMGDIR}/${NAME}.img ${IMG_SIZE}G &> /dev/null && \
  return 0 || return 1
}

function convert_coreos_image() {
  qemu-img convert -O raw -S 0 ${IMGDIR}/${NAME}.img ${IMGDIR}/${NAME}.raw && \
  rm -f ${IMGDIR}/${NAME}.img && mv ${IMGDIR}/${NAME}.raw ${IMGDIR}/${NAME}.img && \
  sync && return 0 || return 1
}

function generate_tap_interfaces() {
  for i in 0 1; do
    ip l del ${NAME}_eth${i} &> /dev/null
    ip tuntap a d ${NAME}_eth${i} m tap || return 1
    brctl addif core0 ${NAME}_eth${i} || return 1
    ip l s dev ${NAME}_eth${i} up || return 1
  done; return 0
}

function genmac() {

  # If defined in ${CFGDIR}/coreos.conf:
  [ "${MAC["$1"]}" ] && echo -n ${MAC["$1"]} && return

  # If not defined generate one:
  HASH=$(echo $(hostname) ${NAME} $1 | md5sum)
  TAIL=$(echo ${HASH:0:6} | sed 's/\(..\)/\1:/g;s/:$//')
  echo -n "${VM_OUI}:${TAIL}"
}

function validate_cloud_config() {
  [ -f ${CFGDIR}/openstack/latest/user_data ]
}

function dynamic_netdev() {
  for i in 0 1; do
    local addr="0x$((i+3))"
    echo -n "-netdev tap,ifname=${NAME}_eth${i},id=hostnet${i},vhost=on,script=no,downscript=no "
    echo -n "-device virtio-net-pci,netdev=hostnet${i},id=net${i},romfile=,bus=pci.0,addr=${addr},mac=$(genmac eth${i}) "
  done
}

function dynamic_drives() {
  id=1; for drive in ${CEPH_DRIVES} ${HDFS_DRIVES}; do
    [ -b "${drive}" ] && {
      echo -n "-drive id=disk${id},if=none,cache=none,aio=native,format=raw,file=${drive} "
      echo -n "-device driver=virtio-scsi-pci,id=scsi${id} "
      echo -n "-device scsi-hd,drive=disk${id} "
      id=$(($id+1))
    }
  done
}

function create_vm() {
  numactl \
  --cpunodebind=${NUMA} \
  --membind=${NUMA} \
  -- qemu-system-x86_64 \
  -enable-kvm \
  -name ${NAME}.${DOMAIN} \
  -smp sockets=${VM_SOCKETS},cores=$((${HOST_CORES} / ${MAXVMS})),threads=1 \
  -m $((${HOST_RAM} / ${MAXVMS})) \
  -rtc base=utc \
  -machine accel=kvm,mem-merge=on \
  -boot order=c,reboot-timeout=60,strict=on \
  -cpu host \
  -nodefconfig \
  -nodefaults \
  -device sga \
  -display none \
  -daemonize \
  $(dynamic_netdev) \
  \
  -drive id=disk0,if=none,cache=none,aio=native,format=raw,file=${IMGDIR}/${NAME}.img \
  -device driver=virtio-scsi-pci,id=scsi0 \
  -device scsi-hd,drive=disk0 \
  \
  -fsdev local,id=conf,security_model=none,readonly,path=${CFGDIR} \
  -device virtio-9p-pci,fsdev=conf,mount_tag=config-2 \
  \
  -fsdev local,id=ssh,security_model=none,readonly,path=${SSHDIR} \
  -device virtio-9p-pci,fsdev=ssh,mount_tag=ssh \
  \
  $(dynamic_drives) \
  \
  -chardev socket,id=monitor,path=${RUNDIR}/monitor.sock,server,nowait \
  -mon chardev=monitor,id=monitor,mode=control \
  \
  -chardev socket,id=console,path=${RUNDIR}/console.sock,server,nowait \
  -device isa-serial,chardev=console,id=serial0 && return 0 || return 1
}

function protect_from_oom() {
  local vm_pid=$(pgrep -f "qemu.*${NAME}")
  echo '-1000' > /proc/${vm_pid}/oom_score_adj
}

function powerdown_vm() {
  (echo '{ "execute": "qmp_capabilities" }{ "execute": "system_powerdown" }' | \
  socat - unix-connect:${RUNDIR}/monitor.sock &> /dev/null) || return 1
  local RETRIES=5; while [ ${RETRIES} -gt 0 ]; do
    (! pgrep -f "qemu.*${NAME}") &> /dev/null && return 0
    sleep 1; RETRIES=$((RETRIES - 1))
  done; pkill -f "qemu.*${NAME}" && return 0 || return 1
}

#------------------------------------------------------------------------------
# Main function:
#------------------------------------------------------------------------------

function main() {

  # Is the VM already running?
  MSG="[${NAME}] Checking VM is not running..."; log "${MSG}"
  (action "${MSG}" [ $(pgrep -cf "qemu.*${NAME}") -eq 0 ]) && \
  log 'OK! Not running yet' || {
    log 'Ops! This VM is already running'; exit 0
  }

  # Is the VM name within the expected range?
  MSG="[${NAME}] Checking VM name is within expected range..."; log "${MSG}"
  (action "${MSG}" validate_vm_name) && \
  log 'OK! VM name range is valid' || {
    log 'Ops! This VM name is not within the expected range'; exit 1
  }

  # Is the hostname in use?
  MSG="[${NAME}] Checking hostname is not in use..."; log "${MSG}"
  (action "${MSG}" hostname_not_in_use) && \
  log 'OK! Not in use yet' || {
    log 'Ops! This hostname is already in use'; exit 1
  }

  # MAXVMS limit reached?
  MSG="[${NAME}] Checking VM limit is not reached..."; log "${MSG}"
  (action "${MSG}" [ $(pgrep -c qemu-system) -lt ${MAXVMS} ]) && \
  log 'OK! Limit not reached yet' || {
    log "Ops! Limit of ${MAXVMS} reached"; exit 1
  }

  # Download and uncompress the CoreOS image:
  [ -f ${IMGDIR}/${NAME}.img ] || {
    MSG="[${NAME}] Downloading CoreOS image file..."; log "${MSG}"
    (action "${MSG}" download_coreos_image) && log 'OK! Download completed' || {
      log 'Ops! Unable to download or uncompress the image'; exit 1
    }
  }

  # Resize the CoreOS disk image:
  readonly SIZE=`qemu-img info --output=json ${IMGDIR}/${NAME}.img | jq '.["virtual-size"]'`
  [ "${SIZE}" -lt "$((${IMG_SIZE}*1024**3))" ] && {
    MSG="[${NAME}] Resizing CoreOS disk image..."; log "${MSG}"
    (action "${MSG}" resize_coreos_image) && \
    log 'OK! Image has new size' || {
      log 'Ops! Unable to resize the image'; exit 1
    }
  }

  # Convert from qcow2 to raw format:
  qemu-img info ${IMGDIR}/${NAME}.img | grep -q qcow2 && {
    MSG="[${NAME}] Converting CoreOS disk image..."; log "${MSG}"
    (action "${MSG}" convert_coreos_image) && \
    log 'OK! Image converted' || {
      log 'Ops! Unable to convert the image'; exit 1
    }
  }

  # Generate the host TAP interfaces:
  MSG="[${NAME}] Generating TAP interfaces..."; log "${MSG}"
  (action "${MSG}" generate_tap_interfaces) && \
  log 'OK! Interfaces are UP' || {
    log 'Ops! Unable to setup the interfaces'; exit 1
  }

  # Validate cloud-config:
  MSG="[${NAME}] Validating cloud-config..."; log "${MSG}"
  (action "${MSG}" validate_cloud_config) && \
  log 'OK! Cloud-config looks good' || {
    log 'Ops! Cloud-config is not valid'; exit 1
  }

  # Start the virtual machine:
  MSG="[${NAME}] Starting the virtual machine..."; log "${MSG}"
  (action "${MSG}" create_vm) && log 'OK! VM is running' || {
    log 'Ops! Unable to start VM'; exit 1
  }

  # Set OOM kill protection:
  MSG="[${NAME}] Protecting from OOM killer... "; log "${MSG}"
  (action "${MSG}" protect_from_oom) && log 'OK! VM PID is protected' || {
    log 'Ops! Unable to deploy the OOM killer shield'; exit 1
  }

  # Test if port 22 is listening:
  MSG="[${NAME}] Testing SSH port..."; log "${MSG}"
  (action "${MSG}" is_ssh_alive) && log 'OK! SSH port is listening' || {
    log 'Ops! SSH port failed to connect'; exit 1
  }

  # One time reboot:
  [ ! -f ${CFGDIR}/bootstrapped ] && {

    MSG="[${NAME}] Restarting after first boot..."; log "${MSG}"
    (action "${MSG}" powerdown_vm) && log 'OK! System is down' || {
      log 'Ops! Unable to powerdown'; exit 1
    }

    date > ${CFGDIR}/bootstrapped
    exec $0 $@
  }
}

#------------------------------------------------------------------------------
# Entry point:
#------------------------------------------------------------------------------

main "$@"

# vim: set syntax=sh expandtab tabstop=2:
