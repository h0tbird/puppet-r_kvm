#!/bin/bash
#
# This file is generated by Puppet and contains a Ceph cluster configuration.
# The config is pushed to Etcd if it is not already present or has changes.
# Do not edit this file. The real config is in a YAML file in Hiera.

#------------------------------------------------------------------------------
# Globals:
#------------------------------------------------------------------------------

# Settings:
readonly CLUSTER_NAME='<%= @ceph_config['cluster_name'] %>'
readonly DESIRED_HASH=$(cat $0 | md5sum | awk '{ print $1 }')

# Return codes:
readonly E_BAD_CMD=10
readonly E_BAD_HASH=11
readonly E_BAD_SET=12

# Commands:
readonly CMD_ETCDCTL=$(type -P etcdctl); [ -z "${CMD_ETCDCTL}" ] && exit ${E_BAD_CMD}

#------------------------------------------------------------------------------
# Functions:
#------------------------------------------------------------------------------

function get_current_hash() {

  CURRENT_HASH=$(${CMD_ETCDCTL} get /ceph-config/${CLUSTER_NAME}/config_hash 2> /dev/null)

  while [ "${CURRENT_HASH}" == "updating" ]; do
    echo "[Populate etcd] Config is being updated wait 2 seconds..."; sleep 2
    CURRENT_HASH=$(${CMD_ETCDCTL} get /ceph-config/${CLUSTER_NAME}/config_hash 2> /dev/null)
  done

  echo ${CURRENT_HASH}
}

function push_config_to_etcd() {
<% sections = ['auth','global','mon','osd','client','mds'] %>
<% sections.each do |section| -%>
  # <%= section %>:
<% @ceph_config[section].each do |key, val| -%>
  echo "[Populate etcd] Setting <%= key %>=<%= val %>"
  ${CMD_ETCDCTL} set /ceph-config/${CLUSTER_NAME}/<%= section %>/<%= key %> '<%= val %>' &> /dev/null || return -1
<% end -%>
<% end -%>
}

#------------------------------------------------------------------------------
# Main function:
#------------------------------------------------------------------------------

function main() {

  # Get the current hash from etcd:
  local MSG1="[Populate etcd] Getting the current config hash from etcd..."
  local MSG2="[Populate etcd] OK! The hash has been retrieved"
  local MSG3="[Populate etcd] Ops! Cannot retrieve the config hash from etcd"
  local MSG4="[Populate etcd] Ok! config hash initialized"
  local MSG5="[Populate etcd] Ops! Cannot initialize the config hash"
  echo ${MSG1}; CURRENT_HASH=$(get_current_hash) && \
  echo ${MSG2} || { echo ${MSG3}; ${CMD_ETCDCTL} set /ceph-config/${CLUSTER_NAME}/config_hash 0 &> /dev/null && \
  echo ${MSG4} || { echo ${MSG5}; exit ${E_BAD_SET}; }; }

  # Check whether changes are needed:
  local MSG1="[Populate etcd] Comparing '${DESIRED_HASH}' with '${CURRENT_HASH}'"
  local MSG2="[Populate etcd] Ok! There is no need to push config to etcd"
  local MSG3="[Populate etcd] Ops! There are pending configuration changes"
  echo ${MSG1}; [ "${DESIRED_HASH}" == "${CURRENT_HASH}" ] && echo ${MSG2} && exit 0
  echo ${MSG3}

  # Acquire lock to not run into race conditions with parallel bootstraps:
  local MSG1="[Populate etcd] Acquiring etcd lock"
  local MSG2="[Populate etcd] Ok! Lock acquired"
  local MSG3="[Populate etcd] Ops! Unable to acquire the lock"
  echo ${MSG1}; ${CMD_ETCDCTL} set /ceph-config/${CLUSTER_NAME}/config_hash updating &> /dev/null && \
  echo ${MSG2} || { echo ${MSG3}; exit ${E_BAD_SET}; }

  # Push the config to Etcd:
  local MSG1="[Populate etcd] Pushing configuration to etcd..."
  local MSG2="[Populate etcd] Ok! The config has been updated"
  local MSG3="[Populate etcd] Ops! Something whent wrong while pushing to etcd"
  echo ${MSG1}; push_config_to_etcd && echo ${MSG2} || { echo ${MSG3}; exit ${E_BAD_SET}; }

  # Set the new configuration hash:
  local MSG1="[Populate etcd] Updating the configuration hash in etcd..."
  local MSG2="[Populate etcd] Ok! The new hash is ${DESIRED_HASH}"
  local MSG3="[Populate etcd] Ops! Cannot set the new hash value"
  echo ${MSG1}; ${CMD_ETCDCTL} set /ceph-config/${CLUSTER_NAME}/config_hash ${DESIRED_HASH} &> /dev/null && \
  echo ${MSG2} || { echo ${MSG3}; exit ${E_BAD_SET}; }
}

#------------------------------------------------------------------------------
# Entry point:
#------------------------------------------------------------------------------

main "@"

# vim: set syntax=sh expandtab tabstop=2:
